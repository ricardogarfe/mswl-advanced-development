{"name":"Mswl-advanced-development","tagline":"Notes and exercises for Advanced Development Subject coursed in [Master on Libre Software (Master Universitario en Software libre](http://master.libresoft.es/) at [Universidad Rey juan Carlos](http://www.urjc.es/)","body":"MSWL Advanced Development\r\n==========================\r\n\r\n# Introduction\r\n\r\nNotes and Exercises for Advanced Development Subject coursed in [Master on Libre Software (Master Universitario en Software libre)](http://master.libresoft.es/) at [Universidad Rey juan Carlos](http://www.urjc.es/).\r\n\r\n# Requirements\r\n\r\n* LaTeX: to compile source code documentation files.\r\n* Android SDK.\r\n\r\n# Android Application\r\n\r\n**TBC**\r\n\r\n# Proof of concept\r\n\r\nAndroid proof of concept applications in Android directory such as `HelloWorld`:\r\n\r\n```shell\r\nmswl-advanced-development\r\n├── android\r\n```\r\n\r\n**TBC**\r\n\r\n# Notes\r\n\r\nGenerate pdf using LaTeX:\r\n\r\n```shell\r\n$ pdflatex [name-of-latex-file.tex]\r\n```\r\n\r\n**TBC**\r\n\r\n# Exercises\r\n\r\nExercises placed in `exercises` directory:\r\n\r\n```shell\r\nmswl-advanced-development\r\n├── android\r\n│   ├── exercises\r\n```\r\n\r\n## Exercise 001\r\n\r\n### Description \r\n\r\nThe first exercise is about android layouts. You can use all the documentation in slides (Intro and Layouts). The goal of this exercise is build an interface similar to social network profile. \r\nYou can use this layout as template.\r\n\r\n![Android Layouts](https://raw.github.com/ricardogarfe/mswl-advanced-development/master/android/exercises/exercise-001/assets/exercise-001-layout.png)\r\n\r\n**Remember:**\r\n\r\n* You should try to use the minimum number of layouts and all the text must be referenced in string.xml file. \r\n* Use Ctrl + F11 to change the view of emulator\r\n\r\n### Solution\r\n\r\n* Exercise 001 solution using ScrollView:\r\n\r\n```shell\r\nmswl-advanced-development\r\n└── android/\r\n    └── exercises\r\n       └── exercise-001\r\n```\r\n\r\n* See [README](https://github.com/ricardogarfe/mswl-advanced-development/blob/master/android/exercises/exercise-001/README.md) file for solution.\r\n\r\n## Exercise 002\r\n\r\n### Description \r\n\r\nThe second exercise is about activities. You can use all the documentation in slides and source code. The goal of this exercise is understand the send of parameters between activities.\r\n\r\nWe make in class an exercise that it has a main activity with some buttons. One of them button generates a transition to `activity2` with `startAcitivityForResult` call and send the title that have to appear in `activity2`. When user push back key from `activity2` we send a **param (20)** as return and show it in the main activity using a **Toast**.\r\n\r\nThe exercise then consist in make the same with _other activity (called activity3)_. As this way, the main activity must show a Toast saying `\"Come back Activity2\"` or `\"Come back Activity3\"`.\r\n\r\n### Resources\r\n\r\n*  [Activities and send parameters](https://github.com/rocapal/android-examples/tree/master/02.1-Activities)\r\n\r\n*  [Life Cycle of Acitivities](https://github.com/rocapal/android-examples/tree/master/02.2-ActivitiesLifeCycle)\r\n\r\n### Solution\r\n\r\n* Exercise 002 **ActivitiesExercise**:\r\n\r\n```shell\r\nmswl-advanced-development\r\n└── android/\r\n    └── exercises\r\n       └── ActivitiesExercise\r\n```\r\n\r\n* See [README](https://github.com/ricardogarfe/mswl-advanced-development/blob/master/android/exercises/ActivitiesExercise/README.md) file for solution.\r\n\r\n## Exercise 003\r\n\r\n### Description \r\n\r\nThis weekly exercise is about android lists. You can use all the documentation in slides (Intro and Layouts). The goal of this exercise is build a list activity that show nodes information and between them (each two regular nodes) you should show a different layout with a textview (simulating advertising).\r\n\r\nYou can use the example of ListActivity as starting point.\r\n\r\n### Resources\r\n\r\nUse Log traces to debug your source code\r\n\r\n```java\r\nprivate final String TAG = getClass().getSimpleName(); \r\nLod.d(TAG, \"trace\");\r\n``` \r\n\r\nYou can refresh your adapter when you change the data from array. Just you use your adapter with the following method:\r\n\r\n```java\r\nmAdapter.notifyDataSetChanged();\r\n```\r\n\r\n### Solution\r\n\r\n* Exercise 003 **ListsLayout**:\r\n\r\n```shell\r\nmswl-advanced-development\r\n└── android/\r\n    └── exercises\r\n       └── ListsLayout\r\n```\r\n\r\n* See [README](https://github.com/ricardogarfe/mswl-advanced-development/blob/master/android/exercises/ListsLayout/README.md) file for solution.\r\n\r\n# License\r\n\r\n<a href=\"http://creativecommons.org/licenses/by/3.0/\" rel=\"Creative Commons Attribution 3.0\">![Foo](http://i.creativecommons.org/l/by/3.0/88x31.png)</a>\r\n\r\nThis work by Ricardo Gracía Fernández - ricardogarfe [at] gmail [dot] com is licensed under a [Creative Commons Attribution 3.0 Unported License](http://creativecommons.org/licenses/by/3.0/).\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}